version: 2.1

orbs:
  slack: circleci/slack@4.12.5

commands:
  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            # Empty before delete the bucket
            aws cloudformation delete-stack --stack-name "master-node-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "worker-node-<< parameters.workflow_id >>"

jobs:
  check-lint:
    docker:
      - image: cozero/linter-html-hint:latest
    steps:
      - checkout
      - run:
          name: Install dependence
          command: |
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && \
            chmod +x /bin/hadolint
      - run:
          name: Check lint html
          command: |
            cd webserver
            /linter/htmlhint.sh html/index.html
      - run:
          name: Check lint Dockerfile
          command: |
            hadolint webserver/Dockerfile
  
  build-and-push-image:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build application Docker image
          command: |
            cd webserver
            docker build -t ${DOCKER_IMAGE} .
      - run:
          name: Push Docker image
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
            docker push ${DOCKER_IMAGE}
  deploy-eks-cluster:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install eks and create EKS cluster
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli.zip"
            unzip awscli.zip
            sudo ./aws/install

            # Get current EKS cluster
            OLD_CLUSTER=$(aws eks list-clusters \
               --query 'clusters' \
               --output text 2>&1)

            if [[ "$OLD_CLUSTER" == "" ]]; then
              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
              sudo mv /tmp/eksctl /usr/local/bin/eksctl
              eksctl create cluster --name=UdacityProject5-${CIRCLE_WORKFLOW_ID:0:7} --zone us-east-1a,us-east-1b,us-east-1c
            fi

  deploy-webserver:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install kubectl and deploy webserver
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli.zip"
            unzip awscli.zip
            sudo ./aws/install

            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

            aws eks update-kubeconfig --name UdacityProject5-${CIRCLE_WORKFLOW_ID:0:7}
            sudo docker pull ${DOCKER_IMAGE}

            # Get current EKS cluster
            OLD_POD=$(kubectl -n eks-webserver get pods -o wide 2>&1)
            echo "Pods $OLD_POD"

            #if [[ "$OLD_CLUSTER" == "" ]]; then
              kubectl create namespace eks-webserver
              kubectl apply -f eks-webserver.yaml
              kubectl apply -f eks-service.yaml

              kubectl get all -n eks-webserver
              kubectl -n eks-webserver describe service eks-webserver
            #else
            #  kubectl set image deployment/eks-webserver ${DOCKER_IMAGE} --record
            #fi

workflows:
  default:
    jobs:
      - check-lint
      - build-and-push-image:
         requires: [check-lint]
         filters:
          branches:
            only: [master]
      - deploy-eks-cluster:
         requires: [build-and-push-image]
      - deploy-webserver:
         requires: [deploy-eks-cluster]
