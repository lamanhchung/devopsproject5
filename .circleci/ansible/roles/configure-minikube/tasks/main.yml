---

- name: "Update apt cache"
  become: true
  apt:
    update_cache: yes

# tasks file for k8s_master
- name: Install required system packages
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - python3-pip
      - virtualenv
      - python3-setuptools
    state: latest
    update_cache: true

# - name: Add Docker GPG apt Key
#   apt_key:
#     url: https://download.docker.com/linux/ubuntu/gpg
#     state: present

# - name: Add Docker Repository
#   apt_repository:
#     repo: deb https://download.docker.com/linux/ubuntu focal stable
#     state: present

# - name: Update apt and install docker-ce and docker-compose
#   apt:
#     pkg:
#       - docker-ce
#       - docker-compose
#     state: latest
#     update_cache: true

# - name: Install Docker Module for Python
#   pip:
#     name: docker

- name: Install Docker:
  become: true
  raw: apt-get install docker.io -y

# - name: installing kubeadm
#   apt:
#     pkg:
#     - kubeadm
#     disable_excludes: kubernetes
#     state: latest

# - name: installing iproute-tc
#   apt:
#     pkg:
#     - iproute-tc
#     state: latest

# - name: enabling kubelet service
#   become: true
#   systemd:
#     state: restarted
#     daemon_reload: yes
#     name: kubelet 
#     state: started
#     enabled: yes

- name: enabling docker service
  become: true
  systemd:
    state: restarted
    daemon_reload: yes
    name: docker
    enabled: yes
    


# - name: pulling all images
#   shell: kubeadm config images pull

# - name: copying content of the daemon.json file
#   copy:
#     dest: /etc/docker/daemon.json
#     src:  daemon.json

- name: restarting docker services
  service:
    name: docker
    state: restarted


# install kubectl
- name: Get latest kubectl version
  uri:
    url: https://dl.k8s.io/release/stable.txt
    return_content: yes
  register: version

- name: Download the latest kubectl release
  uri:
    url: https://dl.k8s.io/release/{{ version.content }}/bin/linux/arm/kubectl
    dest: /home/{{ ansible_user }}
  register: kubectl

- name: Move kubectl and change permissions
  file:
    src: "{{ kubectl.path }}"
    dest: /usr/local/bin/kubectl
    state: hard
    owner: root
    group: root
    mode: "+x"

- name: Install conntrack
  become: true
  apt:
    pkg:
      - conntrack
    state: latest
    update_cache: true

# install minikube
- name: Download the latest minikube release
  uri:
    url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    dest: /home/{{ ansible_user }}
  register: minikube

- name: Move minikube and change permissions
  file:
    src: "{{ minikube.path }}"
    dest: /usr/local/bin/minikube
    state: hard
    owner: root
    group: root
    mode: "+x"

- name: start minikube
  become: true
  raw: minikube start --vm-driver=none

- name: check minikube status
  become: true
  raw: minikube status

# - name: copying k8s conf file
#   copy:
#     dest: /etc/sysctl.d/k8s.conf
#     src: k8s.conf
# - name: refreshing sysctl
#   shell: "sysctl --system"  

# - name: initializing  kubeadm service
#   shell: "kubeadm init --pod-network-cidr=10.244.0.0/16  --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem"
#   ignore_errors: yes   

# - name: Creating the directory
#   file:
#     name: "$HOME/.kube"
#     state: directory

# - name: Copy conf file
#   command: "cp -i /etc/kubernetes/admin.conf $HOME/.kube/config"
#   ignore_errors: yes

# - name: Doing some required thing
#   shell: "chown $(id -u):$(id -g) $HOME/.kube/config"

# - name: Installing flannel
#   shell: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"

# - name: Generate join command
#   shell: "kubeadm token create --print-join-command"
#   register: join

# - name: debugging
#   debug:
#     var: join.stdout